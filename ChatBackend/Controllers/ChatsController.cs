using Microsoft.AspNetCore.Mvc;
using ChatBackend.Models;
using System.Text.Json;
using System.Text;
using ChatBackend.Data;

namespace ChatBackend.Controllers;

[ApiController]
[Route("api/[controller]")]
public class ChatsController : ControllerBase
{
    private static readonly GptOss _chatGenerator = new();

    // GET /api/chats
    // Returns list of chat ids, last message time, title
    [HttpGet]
    public IActionResult GetChats()
    {
        return Ok(ChatsCache.ListChats());
    }

    // GET /api/chats/{chatId}
    // Streams specified chat's message history
    [HttpGet("{chatId:guid}")]
    public async Task GetChat(Guid chatId)
    {
        Response.ContentType = "application/x-ndjson";

        ChatsCache.GetOrCreateChatHistory(chatId, out var history);

        foreach (var message in history.Messages)
        {
            var lsrMessage = message with { Content = LatexStreamRewriter.ProcessString(message.Content) };
            var jsonChunk = JsonSerializer.Serialize(lsrMessage);
            await Response.WriteAsync(jsonChunk + "\n");
            await Response.Body.FlushAsync();
        }
    }

    // DELETE /api/chats/{chatId}
    // Deletes specified chat
    [HttpDelete("{chatId:guid}")]
    public IActionResult DeleteChat(Guid chatId)
    {
        if (ChatsCache.RemoveChatHistory(chatId))
            return NoContent();

        return NotFound();
    }

    // GET /api/chats/{chatId}/title
    // Request specified chat's title generated by model
    [HttpGet("{chatId:guid}/title")]
    public IActionResult GetTitle(Guid chatId)
    {
        if (ChatsCache.GetChatHistory(chatId, out var history))
        {
            return Ok(history!.Title);
        }

        return NotFound($"Chat with ID \"{chatId}\" not found.");
    }

    // PUT /api/chats/{chatId}/title
    // Updates specified chat's title
    [HttpPut("{chatId:guid}/title")]
    public IActionResult ReplaceTitle(Guid chatId, [FromBody] PostTitleRequest request)
    {
        if (ChatsCache.GetChatHistory(chatId, out var history))
        {
            history!.Title = request.Title;
            return NoContent();
        }

        return NotFound($"Chat with ID \"{chatId}\" not found.");
    }


    // POST /api/chats/{chatId}/messages
    // Appends valid user prompts and continues chat, streams AI's response
    [HttpPost("{chatId:guid}/messages")]
    public async Task PostMessage(Guid chatId, [FromBody] PostMessageRequest request)
    {

        ChatsCache.GetOrCreateChatHistory(chatId, out var history);

        if (!string.IsNullOrEmpty(request.UserPrompt))
                history.Messages.Add(new ChatMessage
                {
                    MessageId = request.UserMessageId,
                    Role = MessageRole.User,
                    Content = request.UserPrompt
                });

        var options = request.Options ?? new ChatOptions();
        options.ModelName = "gpt-oss:20b";
        options.SystemMessage = "Fulfill the request to the best of your abilities.";
        options.ExtendedProperties.TryAdd("reasoning_level", "medium");
        options.ExtendedProperties.TryAdd("meta_information", "You are a large language model.");

        LatexStreamRewriter lsr = new();
        Response.ContentType = "application/x-ndjson";
        await foreach (var response in _chatGenerator.ContinueChatAsync(history, options).ReadAllAsync())
        {
            response.ContentChunk = lsr.ProcessChunk(response.ContentChunk);
            var jsonChunk = JsonSerializer.Serialize(response);
            await Response.WriteAsync(jsonChunk + "\n");
            await Response.Body.FlushAsync();
        }
    }

    // DELETE chats/{chatId}/messages/{messageId}
    // Deletes specified message from specified chat
    [HttpDelete("{chatId:guid}/messages/{messageId:guid}")]
    public IActionResult DeleteMessage(Guid chatId, Guid messageId)
    {
        if (ChatsCache.GetChatHistory(chatId, out var history))
        {
            if (history!.Messages.RemoveAll(e => e.MessageId == messageId) > 0)
                return NoContent();
                
            return NotFound($"Message with ID \"{messageId}\" not found in chat with ID {chatId}.");
        }
        return NotFound($"Chat with ID \"{chatId}\" not found.");
    }

    // PUT chats/{chatId}/messages/{messageId}
    // Edits message content of a specified message from specified chat
    [HttpPut("{chatId:guid}/messages/{messageId:guid}")]
    public IActionResult EditMessage(Guid chatId, Guid messageId, [FromBody] PostMessageContentRequest request)
    {
        if (ChatsCache.GetChatHistory(chatId, out var history))
        {
            var message = history!.Messages.FirstOrDefault(e => e.MessageId == messageId);
            if (message is not null)
            {
                message.Content = request.Content;
                return NoContent();
            }
            return NotFound($"Message with ID \"{messageId}\" not found in chat with ID {chatId}.");
        }
        return NotFound($"Chat with ID \"{chatId}\" not found.");
    }

    // POST chats/{chatId}/messages/{messageId}/regenerate
    // Deletes all messages past the last user message before the specified message and re-prompts AI, streams AI's response

    // POST chats/{chatId}/messages/{messageId}/branch
    // Creates a new chat with a copy of the messages in the specified chat up to the specified message.

    private class LatexStreamRewriter
    {
        private bool waitingForNext = false;
        private readonly StringBuilder sb = new();

        public string ProcessChunk(string token)
        {
            sb.Clear();

            foreach (var c in token)
                if (waitingForNext)
                {
                    switch (c)
                    {
                        case '(':
                        case ')':
                            sb.Append('$');
                            break;
                        case '[':
                        case ']':
                            sb.Append("$$");
                            break;
                        default:
                            sb.Append('\\').Append(c); // not math, output the backslash + current char
                            break;
                    }

                    waitingForNext = false;
                }
                else
                    if (c == '\\')
                    waitingForNext = true; // hold until next character
                else
                    sb.Append(c);

            return $"{sb}";
        }

        public static string ProcessString(string input)
        {
            var lsr = new LatexStreamRewriter();
            return lsr.ProcessChunk(input);
        }
    }
}

// DTOs for the request bodies
public class PostTitleRequest
{
    public string Title { get; set; } = "";
}

public class PostMessageRequest
{
    public string UserPrompt { get; set; } = "";
    public Guid UserMessageId { get; set; }
    public ChatOptions? Options { get; set; }
}

public class PostMessageContentRequest
{
    public string Content { get; set; } = "";
}